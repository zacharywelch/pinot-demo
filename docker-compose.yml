services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes

      # Configure listeners for both plain and authenticated connections
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,SASL_PLAINTEXT:SASL_PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,SASL_PLAINTEXT://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,SASL_PLAINTEXT://kafka:9094

      # SASL configuration
      - KAFKA_CFG_SASL_ENABLED_MECHANISMS=PLAIN
      - KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL=PLAIN

      # User configuration - this defines which users can authenticate
      - KAFKA_CFG_SASL_JAAS_CONFIG=org.apache.kafka.common.security.plain.PlainLoginModule required username="admin" password="admin-secret" user_admin="admin-secret" user_producer="producer-secret" user_pinot="pinot-secret";
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  event-producer:
    build: ./producer
    container_name: event-producer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092  # Use the plaintext port instead
      TOPIC_NAME: example-topic
      INTERVAL_MS: 1000
      KAFKA_SECURITY_PROTOCOL: PLAINTEXT  # Simple plaintext connection

  # Pinot components
  pinot-controller:
    image: apachepinot/pinot:latest
    container_name: pinot-controller
    command: "StartController -zkAddress zookeeper:2181 -clusterName pinot-kafka-demo"
    restart: unless-stopped
    ports:
      - "9000:9000"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      JAVA_OPTS: "-Xms512m -Xmx512m -XX:+UseG1GC -XX:MaxGCPauseMillis=200"

  pinot-broker:
    image: apachepinot/pinot:latest
    container_name: pinot-broker
    command: "StartBroker -zkAddress zookeeper:2181 -clusterName pinot-kafka-demo"
    restart: unless-stopped
    ports:
      - "8099:8099"
    depends_on:
      pinot-controller:
        condition: service_started
    environment:
      JAVA_OPTS: "-Xms512m -Xmx512m -XX:+UseG1GC -XX:MaxGCPauseMillis=200"

  pinot-server:
    image: apachepinot/pinot:latest
    container_name: pinot-server
    command: "StartServer -zkAddress zookeeper:2181 -clusterName pinot-kafka-demo"
    restart: unless-stopped
    depends_on:
      pinot-broker:
        condition: service_started
    environment:
      JAVA_OPTS: "-Xms512m -Xmx512m -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
      KAFKA_USERNAME: pinot
      KAFKA_PASSWORD: pinot-secret

  setup:
    image: bitnami/kafka:latest
    container_name: setup
    depends_on:
      kafka:
        condition: service_healthy
      pinot-controller:
        condition: service_started
    volumes:
      - ./pinot-config:/pinot-config
      - ./setup-pinot.sh:/setup-pinot.sh
    command: "bash /setup-pinot.sh"

  cube:
    image: cubejs/cube:latest
    container_name: cube
    ports:
      - "4000:4000"
    depends_on:
      - pinot-broker
    environment:
      CUBEJS_DEV_MODE: "true"
      CUBEJS_DB_TYPE: "pinot"
      CUBEJS_DB_HOST: "http://pinot-broker"
      CUBEJS_DB_PORT: "8099"
      CUBEJS_API_SECRET: "simple-secret"
    volumes:
      - ./cube:/cube/conf
